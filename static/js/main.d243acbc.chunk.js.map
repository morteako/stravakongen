{"version":3,"sources":["fonts/Elianto-Regular.ttf","calculation/api.js","segmentboard.jsx","calculation/ranking.js","ScoreEntry.jsx","Row.jsx","SegmentLink.jsx","HeaderTh.jsx","HeaderRow.jsx","data/segments.js","calculation/sorting.js","Scoreboard.jsx","Dropdowns.jsx","googleAnalytics.js","data/clubs.js","ClubDropdown.jsx","Page.jsx","Store.js","App.js","serviceWorker.js","index.js","mystyle.module.css"],"names":["module","exports","strava","getRequest","access_token","url","axios","request","params","addParam","key","value","addToStrava","args","join","createSegmentLeaderboardClubFull","club","id","createSegmentLeaderboardClub","urlFunctions","all","Api","year","month","Segmentboard","props","useState","segmentPayload","setSegmentPayload","payload","setPayload","segmentId","accessToken","useStoreState","state","useEffect","req","leaderboardRequestCreator","dateRange","then","x","leaderboard","data","entries","useStoreActions","actions","addLeaderboard","segReq","addSegment","fixSharedPosition","rankings","indexed","map","obj","ind","rankPos","grouped","Object","values","groupBy","score","flatMap","group","calcScore","rank","pointsForFirstPlace","rankingGen","allTime","segments","leaderboards","getNoEffortScore","sorter","curSegments","filter","segId","summed","athlete_name","athleteRecord","athleteName","ranks","effort","start_date","some","reduce","a","b","summedArray","sort","secToMMSS","durationInSec","secs","parseInt","date","Date","setSeconds","getHours","toISOString","substr","ScoreEntry","elapsed_time","start_date_local","segmentData","clicked","split","reverse","formatDate","elapsedTimeInSeconds","rankOrPoints","text","speedInfo","elapsedTimeInSecs","distance","activity_type","toFixed","secKm","getSpeedInfo","scoreClass","1","styles","entry_first","2","entry_second","3","entry_third","entry_normal","borderClass","diffTime","Math","abs","ceil","isSetPastWeek","entry_border","className","EmptyScoreEntry","_","Row","flipClicked","onClick","0","ranktext_header","ranktext_rank","ranktext_score","Array","from","effortData","createScoreEntry","SegmentLink","realSegmentName","providedSegmentName","numAthletes","averageGrade","distanceOneDec","round","prettyAverageGrade","extraInfo","name","header","href","event","stopPropagation","HeaderTh","child","HeaderRow","segmentRowMapper","segmentRowClicked","React","setClicked","setSegmentRowClicked","allSegments","1942901","groups","klatrekongen","allroundern","tryvanndobbelen","4252879","660072","632847","666298","2783427","lopekongen","bliss","2462560","2553283","bml","657002","21317574","1032853","11861324","5891167","1557103","5102820","9358707","1331159","8059590","utforkongen","14733934","6890951","666794","tempokongen","1229519","23325175","23330779","23330813","23330843","23330762","keys","forEach","types","emojis","getEmojis","groupId","allGroups","navn","getSortingName","arg","leaderboardsAllTime","realName","providedName","newest","Scoreboard","sortingMode","storeSegments","athleteEfforts","segmentLeaderboards","dataRows","rankHighestPoints","localeCompare","Infinity","aMin","k","includes","bMin","max","getSortingMode","Table","striped","bordered","hover","length","stravaName","average_grade","dateRangeTitle","Dropdowns","segmentGroup","sortMode","currentSegments","setDateRange","setSortMode","setSegmentGroup","dateRangeDropwdownItems","v","Dropdown","Item","dropdown_item","periodName","writeStorage","ReactGA","category","action","label","sortModes","concat","sortingName","GA","points","divider","sortDropdownItems","currentSegmentGroups","every","type","filterGroupsOnTypes","button_row","DropdownButton","button","title","rest","insertDivider","groupSlug","getClubHelper","clubs","bekk","ClubDropdown","items","window","location","reload","clubName","Page","lsSegmentGroup","startSegmentGroup","period","queryParams","qs","search","token","setToken","post","client_id","process","grant_type","client_secret","refresh_token","catch","console","log","addAccessToken","useAccesToken","urlSegments","res","JSON","parse","isNaN","error","propsClub","lsClub","segmentsFromGroup","seg","headerHeadline","store","createStore","leaderboardClicked","setLeaderboardClicked","acces_token","segment","filteredLeaderboard","entry","curEntries","initialize","debug","titleCase","gaOptions","siteSpeedSampleRate","pageview","pathname","App","useLocalStorage","viewport","document","querySelector","content","zoomOutMobile","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d243acbc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Elianto-Regular.217c0af5.ttf\";","import axios from \"axios\";\r\nimport { useStoreActions } from \"easy-peasy\";\r\nimport React from \"react\";\r\n\r\nconst strava = \"https://www.strava.com/api/v3/\";\r\n\r\nexport const useAccesToken = () => {\r\n  const [token, setToken] = React.useState(null);\r\n\r\n  React.useEffect(() => {\r\n    axios\r\n      .post(strava + \"oauth/token\", {\r\n        client_id: process.env.REACT_APP_CLIENT_ID,\r\n        grant_type: \"refresh_token\",\r\n        client_secret: process.env.REACT_APP_CLIENT_SECRET,\r\n        refresh_token: process.env.REACT_APP_REFRESH_TOKEN,\r\n      })\r\n      .then((x) => {\r\n        setToken(x.data.access_token);\r\n      })\r\n      .catch((x) => console.log(x));\r\n  }, []);\r\n\r\n  useStoreActions((actions) => actions.addAccessToken)(token);\r\n};\r\n\r\nexport const getRequest = (access_token, url) => {\r\n  return axios.request(url, {\r\n    params: { access_token },\r\n  });\r\n};\r\nconst addParam = (url, key, value) => {\r\n  return key !== \"club\" && value !== \"skip\" ? `${url}&${key}=${value}` : url;\r\n};\r\n\r\nconst addToStrava = (...args) => strava + args.join(\"/\") + \"?\";\r\n\r\nexport const createAthlete = (id) => addToStrava(\"athletes\", id);\r\nexport const createSegment = (id) => addToStrava(\"segments\", id);\r\n\r\nexport const createSegmentLeaderboard = (id) =>\r\n  addToStrava(\"segments\", id, \"leaderboard\");\r\n\r\nexport const createSegmentLeaderboardClub = (club, id) =>\r\n  addParam(addToStrava(\"segments\", id, \"leaderboard\"), \"club_id\", club);\r\n\r\nexport const createSegmentLeaderboardClubFull = (club, id) =>\r\n  addParam(createSegmentLeaderboardClub(club, id), \"per_page\", 50);\r\n\r\nexport const createSegmentLeaderboardClubThisYear = (club, id) =>\r\n  addParam(\r\n    createSegmentLeaderboardClubFull(club, id),\r\n    \"date_range\",\r\n    \"this_year\"\r\n  );\r\n\r\nexport const createSegmentLeaderboardClubThisMonth = (club, id) =>\r\n  addParam(\r\n    createSegmentLeaderboardClubFull(club, id),\r\n    \"date_range\",\r\n    \"this_month\"\r\n  );\r\n","import { useState, useEffect } from \"react\";\r\nimport * as Api from \"./calculation/api\";\r\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\r\n\r\nconst urlFunctions = {\r\n  all: Api.createSegmentLeaderboardClubFull,\r\n  year: Api.createSegmentLeaderboardClubThisYear,\r\n  month: Api.createSegmentLeaderboardClubThisMonth,\r\n};\r\n\r\nconst Segmentboard = (props) => {\r\n  const [segmentPayload, setSegmentPayload] = useState(null);\r\n  const [payload, setPayload] = useState(null);\r\n  const { club, segmentId } = props;\r\n\r\n  const accessToken = useStoreState((state) => state.accessToken);\r\n\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    const leaderboardRequestCreator = urlFunctions[props.dateRange];\r\n    const req = leaderboardRequestCreator(club.id || club, segmentId);\r\n    Api.getRequest(accessToken, req).then((x) => {\r\n      setPayload({\r\n        id: segmentId,\r\n        dateRange: props.dateRange,\r\n        leaderboard: x.data.entries,\r\n      });\r\n    });\r\n  }, [segmentId, props.dateRange, club, accessToken]);\r\n\r\n  useStoreActions((actions) => actions.addLeaderboard)(payload);\r\n\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    const segReq = Api.createSegment(segmentId);\r\n\r\n    Api.getRequest(accessToken, segReq).then((x) => {\r\n      setSegmentPayload(x.data);\r\n    });\r\n  }, [segmentId, accessToken]);\r\n\r\n  useStoreActions((actions) => actions.addSegment)(segmentPayload);\r\n\r\n  return null;\r\n};\r\n\r\nexport default Segmentboard;\r\n","import { groupBy } from \"lodash\";\n\nconst fixSharedPosition = rankings => {\n  const indexed = rankings.map((obj, ind) => ({ ...obj, rankPos: ind }));\n\n  const grouped = Object.values(groupBy(indexed, x => x.score));\n\n  const setNewRankPos = rankPos => obj => ({ ...obj, rankPos });\n  const fixedRankPos = grouped.flatMap(group =>\n    group.map(setNewRankPos(group[0].rankPos))\n  );\n\n  return fixedRankPos;\n};\n\n// export const rankLowestPoints = (allTime, segments, leaderboards) => \n//   rankingGen(\n//     allTime,\n//     segments,\n//     leaderboards,\n//     (segId => leaderboards[segId].length + 1),\n//     (rank => rank),\n//     ((a,b) => a.score - b.score)\n//   )\n\nexport const rankHighestPoints = (allTime, segments, leaderboards) => \n  rankingGen(\n    allTime,\n    segments,\n    leaderboards,\n    (_ => 0),\n    calcScore,\n    ((a,b) => b.score - a.score)\n  )\n\n\nexport const pointsForFirstPlace = 50\n\nexport const calcScore = rank => pointsForFirstPlace + 1 - rank\n\nconst rankingGen = (allTime, segments, leaderboards, getNoEffortScore, calcScore, sorter) => {\n  \n\n  const getRank = (effort, segmentId) => {\n    if (!effort) return { score: getNoEffortScore(segmentId) };\n    return { score: calcScore(effort.rank), effort: true, start_date: effort.start_date };\n  };\n\n  const curSegments = segments.filter(segId => leaderboards[segId]);\n\n  const createRanks = ([athlete_name, athleteRecord]) => ({\n    athleteName: athlete_name,\n    ranks: curSegments.map(segId => getRank(athleteRecord[segId], segId))\n  });\n  const leaderboardWithRanks = Object.entries(allTime)\n    .map(createRanks)\n    .filter(obj => obj.ranks.some(x => x.effort));\n\n  const summed = leaderboardWithRanks.map(({ athleteName, ranks }) => ({\n    athleteName,\n    ranks,\n    score: ranks.reduce((a, b) => a + b.score, 0)\n  }));\n\n  const summedArray = Object.entries(summed).map(([, value]) => value);\n  summedArray.sort(sorter);\n  return fixSharedPosition(summedArray);\n};\n\n\n","import React from \"react\";\r\nimport styles from \"./mystyle.module.css\";\r\nimport { calcScore } from \"./calculation/ranking\";\r\n\r\nexport const createScoreEntry = (effortData, segmentData, clicked, ind) => {\r\n\r\n  const props = { ...effortData, segmentData, clicked };\r\n  \r\n  return effortData ? (\r\n    <ScoreEntry key={ind} {...props} />\r\n  ) : (\r\n      <EmptyScoreEntry key={ind}/>\r\n    );\r\n};\r\n\r\nconst secToMMSS = durationInSec => {\r\n  const secs = parseInt(durationInSec, 10);\r\n  const date = new Date(null);\r\n  date.setSeconds(secs);\r\n  return date.getHours() > 1 //means that it lasts more than 1 hour\r\n    ? date.toISOString().substr(11, 8) //\"add\" hh:\r\n    : date.toISOString().substr(14, 5); //skip hh:\r\n};\r\n\r\nconst isSetPastWeek = date => {\r\n  const diffTime = Math.abs(new Date() - new Date(date));\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  return diffDays < 7;\r\n};\r\n\r\nconst getSpeedInfo = (elapsedTimeInSecs, segmentData) => {\r\n  if (!(segmentData && segmentData.distance)) return \"\";\r\n  if (segmentData.activity_type === \"Ride\") {\r\n    const kmH = segmentData.distance / ((1000 * elapsedTimeInSecs) / (60 * 60));\r\n    return kmH.toFixed(1) + \" km/t\";\r\n  }\r\n  if (segmentData.activity_type === \"Run\") {\r\n    const secKm = (1000 * elapsedTimeInSecs) / segmentData.distance;\r\n    return secToMMSS(secKm) + \" min/km\";\r\n  }\r\n  return \"\";\r\n};\r\n\r\nconst formatDate = date =>\r\n  date\r\n    .substr(0, 10)\r\n    .split(\"-\")\r\n    .reverse()\r\n    .join(\".\");\r\n\r\nconst ScoreEntry = props => {\r\n  const { elapsed_time, start_date_local, rank, segmentData, clicked } = props;\r\n  const date = formatDate(start_date_local);\r\n\r\n  const elapsedTimeInSeconds = secToMMSS(elapsed_time);\r\n\r\n  const score = calcScore(rank)\r\n  const rankOrPoints = clicked \r\n    ? score + \"p\"\r\n    : \"#\" + rank\r\n\r\n  const text = <div><b>{elapsedTimeInSeconds}</b> {`- ${rankOrPoints}`}</div>;\r\n  const speedInfo = getSpeedInfo(elapsed_time, segmentData);\r\n\r\n  \r\n\r\n  const entryClasses = {\r\n    1: styles.entry_first,\r\n    2: styles.entry_second,\r\n    3: styles.entry_third\r\n  };\r\n  const scoreClass = entryClasses[rank] || styles.entry_normal;\r\n\r\n  const borderClass = isSetPastWeek(start_date_local)\r\n    ? ` ${styles.entry_border}`\r\n    : \"\";\r\n  return (\r\n    <td className={scoreClass + borderClass}>\r\n      {text} <span>{clicked && date + \" - \" + speedInfo}</span>\r\n    </td>\r\n  );\r\n};\r\n\r\nconst EmptyScoreEntry = _ => {\r\n  return <td> </td>;\r\n};\r\n\r\nexport default ScoreEntry;\r\n","import React from \"react\";\r\nimport styles from \"./mystyle.module.css\";\r\nimport { createScoreEntry } from \"./ScoreEntry\";\r\nimport { useStoreState } from \"easy-peasy\";\r\n\r\nconst Row = props => {\r\n  const [athleteName, score, athleteRecord, segments, rankPos] = props.args;\r\n  const { clicked, flipClicked } = props;\r\n\r\n  const state = useStoreState(state => state);\r\n  const medals = {\r\n    0: \" 🥇\",\r\n    1: \" 🥈\",\r\n    2: \" 🥉\"\r\n  };\r\n  return (\r\n    <tr onClick={flipClicked}>\r\n      <td>\r\n        <b>{athleteName}</b>\r\n        {medals[rankPos]}\r\n      </td>\r\n      <td className={styles.ranktext_header}>\r\n        <span className={styles.ranktext_rank}>{rankPos + 1}</span>\r\n        <span className={styles.ranktext_score}>{` (${score})`}</span>\r\n      </td>\r\n      {Array.from(segments).map((segId, ind) =>\r\n        createScoreEntry(\r\n          athleteRecord[segId],\r\n          state.segments[segId],\r\n          clicked,\r\n          ind\r\n        )\r\n      )}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport styles from \"./mystyle.module.css\";\r\n\r\nconst segmentUrl = \"https://www.strava.com/segments/\";\r\n\r\nconst SegmentLink = props => {\r\n  const {\r\n    segmentId,\r\n    realSegmentName,\r\n    providedSegmentName,\r\n    numAthletes,\r\n    distance,\r\n    averageGrade,\r\n    clicked\r\n  } = props;\r\n\r\n  const distanceOneDec = Math.round((distance / 1000) * 10) / 10;\r\n  const prettyDistance = distanceOneDec + \"km\";\r\n  const prettyAverageGrade = averageGrade;\r\n  const extraInfo = ` - ${prettyDistance} ${prettyAverageGrade}% (${numAthletes})`;\r\n  const name = clicked\r\n    ? realSegmentName\r\n    : providedSegmentName || realSegmentName;\r\n  return (\r\n    <a\r\n      className={styles.header}\r\n      href={segmentUrl + segmentId}\r\n      onClick={event => event.stopPropagation()}\r\n    >\r\n      {name} {clicked && extraInfo}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default SegmentLink;\r\n","import React from \"react\";\nimport styles from \"./mystyle.module.css\";\n\nconst HeaderTh = props => {\n  const { child } = props;\n\n  return <th className={styles.header}>{child}</th>;\n};\n\nexport default HeaderTh;\n","import React from \"react\";\nimport HeaderTh from \"./HeaderTh\";\nimport { useStoreActions, useStoreState } from \"easy-peasy\";\n\nconst HeaderRow = props => {\n  const { segmentRowMapper } = props;\n  const { segmentRowClicked } = useStoreState(state => state);\n\n  const [clicked, setClicked] = React.useState(segmentRowClicked);\n  useStoreActions(actions => actions.setSegmentRowClicked)(clicked);\n\n  return (\n    <tr onClick={() => setClicked(!clicked)}>\n      <HeaderTh child={\"Navn\"} />\n      <HeaderTh child={\"# (Poeng)\"} />\n      {segmentRowMapper(clicked).map(x => (\n        <HeaderTh key={x.props.segmentId} child={x} />\n      ))}\n    </tr>\n  );\n};\n\nexport default HeaderRow;\n","export const allSegments = {\r\n  1942901: {\r\n    name: \"Tryvann\",\r\n    groups: {\r\n      \"klatrekongen-vest\": 1,\r\n      klatrekongen: 1,\r\n      allroundern: 1,\r\n      tryvanndobbelen: 1\r\n    }\r\n  },\r\n  4252879: {\r\n    name: \"Olaf Bulls vei\",\r\n    groups: {\r\n      \"klatrekongen-vest\": 1\r\n    }\r\n  },\r\n  660072: {\r\n    name: \"Grefsenkollen\",\r\n    groups: {\r\n      \"klatrekongen-vest\": 1,\r\n      \"Klatrekongen-ost\": 1,\r\n      klatrekongen: 1,\r\n      allroundern: 1\r\n    }\r\n  },\r\n  632847: {\r\n    name: \"Kongsveien\",\r\n    groups: {\r\n      klatrekongen: 1,\r\n      \"klatrekongen-ost\": 1\r\n    }\r\n  },\r\n  666298: {\r\n    name: \"Svartskogbakken\",\r\n    groups: {\r\n      \"klatrekongen-ost\": 1\r\n    }\r\n  },\r\n  2783427: {\r\n    name: \"Sognsvann rundt motsols\",\r\n    groups: {\r\n      lopekongen: 1,\r\n      allroundern: 1,\r\n      bliss: 1\r\n    }\r\n  },\r\n  2462560: {\r\n    name: \"Sognsvann rundt medsols\",\r\n    groups: {\r\n      bliss: 1\r\n    }\r\n  },\r\n\r\n  2553283: {\r\n    name: \"Tour de Finance løp\",\r\n    groups: {\r\n      lopekongen: 1,\r\n      bml: 1\r\n    }\r\n  },\r\n  657002: {\r\n    groups: {\r\n      bml: 1\r\n    }\r\n  },\r\n  21317574: {\r\n    groups: {\r\n      bml: 1\r\n    }\r\n  },\r\n  1032853: {\r\n    groups: {\r\n      bml: 1\r\n    }\r\n  },\r\n  11861324: {\r\n    groups: {\r\n      bml: 1\r\n    }\r\n  },\r\n  5891167: {\r\n    name: \"Sognsvann - Ullevålseter\",\r\n    groups: {\r\n      bliss: 1\r\n    }\r\n  },\r\n  1557103: {\r\n    name: \"Vettakollen opp\",\r\n    groups: {\r\n      lopekongen: 1,\r\n      allroundern: 1,\r\n      bliss: 1\r\n    }\r\n  },\r\n  5102820: {\r\n    name: \"Holmenkollveien\",\r\n    groups: {\r\n      tryvanndobbelen: 1\r\n    }\r\n  },\r\n  9358707: {\r\n    name: \"Hammeren-Kikutkrysset\",\r\n    groups: {\r\n      \"kikut-sykkel\": 1\r\n    }\r\n  },\r\n  1331159: {\r\n    name: \"Zinoberveien - Kikut\",\r\n    groups: {\r\n      \"kikut-sykkel\": 1\r\n    }\r\n  },\r\n  8059590: {\r\n    name: \"Grefsenkollen ned\",\r\n    groups: {\r\n      utforkongen: 1\r\n    }\r\n  },\r\n  14733934: {\r\n    name: \"Tryvann ned\",\r\n    groups: {\r\n      utforkongen: 1\r\n    }\r\n  },\r\n  6890951: {\r\n    name: \"Greveveien downhill\",\r\n    groups: {\r\n      utforkongen: 1\r\n    }\r\n  },\r\n  666794: {\r\n    name: \"Sørkedalen\",\r\n    groups: {\r\n      tempokongen: 1\r\n    }\r\n  },\r\n  1229519: {\r\n    name: \"Maridalen\",\r\n    groups: {\r\n      tempokongen: 1\r\n    }\r\n  },\r\n  23325175: {\r\n    groups: {\r\n      \"nurc-trondheim\": 1\r\n    }\r\n  },\r\n  23330779: {\r\n    groups: {\r\n      \"nurc-trondheim\": 1\r\n    }\r\n  },\r\n  23330813: {\r\n    groups: {\r\n      \"nurc-trondheim\": 1\r\n    }\r\n  },\r\n  23330843: {\r\n    groups: {\r\n      \"nurc-trondheim\": 1\r\n    }\r\n  },\r\n  23330762: {\r\n    groups: {\r\n      \"nurc-trondheim\": 1\r\n    }\r\n  },\r\n};\r\n//Hacky way to add ids to the objects. Reduces duplication\r\nObject.keys(allSegments).forEach(segmentId => allSegments[segmentId].id = segmentId)\r\n\r\n\r\nexport const types = {\r\n  cycling: \"cycling\",\r\n  running: \"running\",\r\n  downhill: \"downhill\",\r\n  climbing: \"climbing\",\r\n  bliss: \"bliss\"\r\n};\r\n\r\nexport const filterGroupsOnTypes = club => {\r\n  if (!club) return allGroups;\r\n  return Object.keys(allGroups).filter(group =>\r\n    allGroups[group].types.every(\r\n      type => !club.types || club.types.includes(type)\r\n    )\r\n  );\r\n};\r\n\r\nconst emojis = {\r\n  [types.cycling]: \"🚴🏼‍♂️\",\r\n  [types.running]: \"🏃🏻‍♂️\",\r\n  [types.downhill]: \" ⬇️ 😵\",\r\n  [types.climbing]: \" 🗻\",\r\n  [types.bliss]: \"\"\r\n};\r\n\r\nexport const getEmojis = groupId =>\r\n  allGroups[groupId] && allGroups[groupId].types.map(x => emojis[x]).join(\" \");\r\n\r\nexport const allGroups = {\r\n  klatrekongen: {\r\n    navn: \"Klatrekongen\",\r\n    types: [types.cycling, types.climbing]\r\n  },\r\n  bml: {\r\n    navn: \"Breaking Marathon Limits\",\r\n    types: [types.running]\r\n  },\r\n  lopekongen: {\r\n    navn: \"Løpekongen\",\r\n    types: [types.running]\r\n  },\r\n  \"klatrekongen-vest\": {\r\n    navn: \"Klatrekongen Vest\",\r\n    types: [types.cycling, types.climbing]\r\n  },\r\n  \"klatrekongen-ost\": {\r\n    navn: \"Klatrekongen Øst\",\r\n    types: [types.cycling, types.climbing]\r\n  },\r\n  tempokongen: {\r\n    navn: \"Tempokongen\",\r\n    types: [types.cycling]\r\n  },\r\n  utforkongen: {\r\n    navn: \"Utforkongen\",\r\n    types: [types.cycling, types.downhill]\r\n  },\r\n  tryvanndobbelen: {\r\n    navn: \"Tryvanndobbel\",\r\n    types: [types.cycling, types.running, types.climbing]\r\n  },\r\n  allroundern: {\r\n    navn: \"Allrounder'n\",\r\n    types: [types.cycling, types.running]\r\n  },\r\n  bliss: {\r\n    navn: \"Bliss\",\r\n    types: [types.running, types.bliss]\r\n  },\r\n  \"nurc-trondheim\": {\r\n    navn: \"NURC Trondheim\",\r\n    types: [types.running]\r\n  }\r\n};\r\n","import _ from \"lodash\";\r\nimport { allSegments } from \"../data/segments\";\r\n\r\nexport const getSortingName = (arg, leaderboardsAllTime, clicked) => {\r\n  if (arg.name) return \"Navn\";\r\n  if (arg.score) return \"Poeng\";\r\n  if (arg.segmentId) {\r\n    const realName =\r\n      leaderboardsAllTime &&\r\n      leaderboardsAllTime[arg.segmentId] &&\r\n      leaderboardsAllTime[arg.segmentId].name;\r\n    const providedName =\r\n      allSegments &&\r\n      allSegments[arg.segmentId] &&\r\n      allSegments[arg.segmentId].name;\r\n    const realNameIfClicked = clicked && realName;\r\n    return realNameIfClicked || providedName || realName || arg.segmentId;\r\n  }\r\n  if (arg.newest) return \"Nyeste oppføring\";\r\n};\r\n\r\nexport const getSortingMode = (arg, segments, all) => {\r\n  if (arg.name) return (a, b) => a.athleteName.localeCompare(b.athleteName);\r\n  if (arg.score) return (a, b) => a.rankPos - b.rankPos;\r\n  if (arg.segmentId)\r\n    return (a, b) => {\r\n      const aEffort =\r\n        all[a.athleteName][arg.segmentId] &&\r\n        all[a.athleteName][arg.segmentId].elapsed_time;\r\n      const bEffort =\r\n        all[b.athleteName][arg.segmentId] &&\r\n        all[b.athleteName][arg.segmentId].elapsed_time;\r\n      const aTime = aEffort || Infinity;\r\n      const bTime = bEffort || Infinity;\r\n\r\n      return aTime - bTime;\r\n    };\r\n  if (arg.newest)\r\n    return (a, b) => {\r\n      const aMin = Object.entries(all[a.athleteName])\r\n        .filter(([k]) => segments.includes(parseInt(k)))\r\n        .map(([, x]) => new Date(x.start_date));\r\n\r\n      const bMin = Object.entries(all[b.athleteName])\r\n        .filter(([k]) => segments.includes(parseInt(k)))\r\n        .map(([, x]) => new Date(x.start_date));\r\n\r\n      return _.max(bMin) - _.max(aMin);\r\n    };\r\n};\r\n","import React from \"react\";\r\nimport { useStoreState } from \"easy-peasy\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport {rankHighestPoints} from \"./calculation/ranking\";\r\nimport Row from \"./Row\";\r\nimport SegmentLink from \"./SegmentLink\";\r\nimport HeaderRow from \"./HeaderRow\";\r\nimport { getSortingMode } from \"./calculation/sorting\";\r\nimport { allSegments } from \"./data/segments\";\r\n\r\nconst Scoreboard = props => {\r\n  const { sortingMode, segments, dateRange, clicked, setClicked } = props;\r\n\r\n  const state = useStoreState(state => state);\r\n\r\n  const storeSegments = state.segments;\r\n  const allTime = state.athleteEfforts[dateRange];\r\n  const leaderboardsAllTime = state.segmentLeaderboards[dateRange];\r\n\r\n  const flipClicked = () => setClicked(!clicked);\r\n\r\n  const segmentRowMapper = clicked =>\r\n    segments.map(segId => {\r\n      const numAthletes = leaderboardsAllTime[segId]\r\n        ? leaderboardsAllTime[segId].length\r\n        : \"\";\r\n      const providedName = allSegments[segId] && allSegments[segId].name;\r\n      const stravaName = storeSegments[segId] && storeSegments[segId].name;\r\n\r\n      return (\r\n        <SegmentLink\r\n          key={segId}\r\n          segmentId={segId}\r\n          numAthletes={numAthletes}\r\n          realSegmentName={stravaName}\r\n          providedSegmentName={providedName}\r\n          distance={storeSegments[segId] && storeSegments[segId].distance}\r\n          averageGrade={\r\n            storeSegments[segId] && storeSegments[segId].average_grade\r\n          }\r\n          clicked={clicked}\r\n        />\r\n      );\r\n    });\r\n\r\n  const ranking = rankHighestPoints(allTime, segments, leaderboardsAllTime).sort(\r\n    getSortingMode(sortingMode, segments, allTime)\r\n  );\r\n\r\n  const dataRows = ranking.map(({ athleteName, score, rankPos }, ind) => (\r\n    <Row\r\n      key={athleteName}\r\n      args={[athleteName, score, allTime[athleteName], segments, rankPos]}\r\n      clicked={clicked}\r\n      flipClicked={() => flipClicked()}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <HeaderRow segmentRowMapper={segmentRowMapper} />\r\n      </thead>\r\n      <tbody>{dataRows}</tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nexport default Scoreboard;\r\n","import React from \"react\";\r\nimport { useStoreState } from \"easy-peasy\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport DropdownDivider from \"react-bootstrap/Dropdown\";\r\nimport styles from \"./mystyle.module.css\";\r\nimport { allGroups, filterGroupsOnTypes, getEmojis } from \"./data/segments\";\r\nimport { getSortingName } from \"./calculation/sorting\";\r\nimport { writeStorage } from \"@rehooks/local-storage\";\r\nimport * as GA from \"./googleAnalytics\"\r\n\r\nconst dateRangeTitle = {\r\n  all: \"Gjennom alle tider\",\r\n  year: \"I år\",\r\n  month: \"Denne måneden\"\r\n};\r\n\r\nconst Dropdowns = ({ props }) => {\r\n  const {\r\n    segmentGroup,\r\n    dateRange,\r\n    sortMode,\r\n    currentSegments,\r\n    setDateRange,\r\n    setSortMode,\r\n    setSegmentGroup,\r\n    club\r\n  } = props;\r\n\r\n  const { segmentRowClicked } = useStoreState(state => state);\r\n\r\n  const dateRangeDropwdownItems = Object.entries(dateRangeTitle).map(\r\n    ([k, v]) => (\r\n      <Dropdown.Item\r\n        key={k}\r\n        className={styles.dropdown_item}\r\n        onClick={_ => {\r\n          writeStorage(\"period\", k);\r\n          GA.changePeriod(k)\r\n          setDateRange(k)\r\n        }}\r\n      >\r\n        {v}\r\n      </Dropdown.Item>\r\n    )\r\n  );\r\n\r\n  const mapGroupsToItems = groups => {\r\n    return groups.map(groupSlug => (\r\n      <Dropdown.Item\r\n        key={groupSlug}\r\n        className={styles.dropdown_item}\r\n        onClick={() => {\r\n          GA.changeSegmentGroup(groupSlug)\r\n          setSegmentGroup(groupSlug)\r\n        }}\r\n      >\r\n        {allGroups[groupSlug].navn + getEmojis(groupSlug)}\r\n      </Dropdown.Item>\r\n    ));\r\n  };\r\n\r\n  const sortModes = [{ score: true }, { name: true }, { newest: true }].concat(\r\n    currentSegments.map(x => ({ segmentId: x }))\r\n  );\r\n\r\n  const storeSegments = useStoreState(state => state.segments);\r\n\r\n  const [points, name, newest, ...segments] = sortModes.map(sortMode => {\r\n    const sortingName = getSortingName(sortMode, storeSegments, segmentRowClicked)\r\n    return (\r\n      <Dropdown.Item\r\n        key={sortingName}\r\n        className={styles.dropdown_item}\r\n        onClick={() => {\r\n          GA.changeSorting(sortingName)\r\n          setSortMode(sortMode)\r\n        }}\r\n      >\r\n        {sortingName}\r\n      </Dropdown.Item>\r\n    )\r\n  }\r\n  );\r\n\r\n  const divider = <DropdownDivider key=\"divider\" className={styles.divider} />;\r\n\r\n  const sortDropdownItems = [points, name, divider, ...segments];\r\n\r\n  const currentSegmentGroups = filterGroupsOnTypes(club);\r\n\r\n  const insertDivider = ([a, b, ...rest]) =>\r\n    [a, b, divider, ...rest]\r\n\r\n  return (\r\n    <div className={styles.button_row}>\r\n      <DropdownButton\r\n        className={styles.button}\r\n        title={\r\n          \"Segmentgruppe : \" +\r\n          allGroups[segmentGroup].navn +\r\n          \" \" +\r\n          getEmojis(segmentGroup)\r\n        }\r\n      >\r\n        {insertDivider(mapGroupsToItems(currentSegmentGroups))}\r\n      </DropdownButton>\r\n      <DropdownButton\r\n        className={styles.button}\r\n        title={\"Periode : \" + dateRangeTitle[dateRange]}\r\n      >\r\n        {dateRangeDropwdownItems}\r\n      </DropdownButton>\r\n      <DropdownButton\r\n        className={styles.button}\r\n        title={\r\n          \"Sortering : \" +\r\n          getSortingName(sortMode, storeSegments, segmentRowClicked)\r\n        }\r\n      >\r\n        {sortDropdownItems}\r\n      </DropdownButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dropdowns;\r\n","\nimport ReactGA from 'react-ga';\n\n\nexport const changeClub = club => {\n    ReactGA.event({\n        category: \"Club\",\n        action: \"Changed club\",\n        label: club.name\n    })\n}\n\nexport const changeSegmentGroup = groupSlug => {\n    ReactGA.event({\n        category: \"Segment group\",\n        action: \"Changed group\",\n        label: groupSlug\n    })\n}\n\nexport const changePeriod = periodName => {\n    ReactGA.event({\n        category: \"Period\",\n        action: \"Changed period\",\n        label: periodName\n    })\n}\n\nexport const changeSorting = sortingName => {\n    ReactGA.event({\n        category: \"Sorting\",\n        action: \"Changed sorting\",\n        label: sortingName\n    })\n}","import { types } from \"./segments\";\r\n\r\nexport const getClub = (propsClub, lsClub) => {\r\n  if (!propsClub && lsClub) return clubs[lsClub] || lsClub;\r\n  const res = getClubHelper(propsClub);\r\n  return res;\r\n};\r\n\r\nconst getClubHelper = (club) => {\r\n  if (clubs[club]) return clubs[club];\r\n  return club ? club : clubs.bekk;\r\n};\r\n\r\nexport const clubs = {\r\n  all: {\r\n    id: \"skip\",\r\n    name: \"Ingen valgt klubb\",\r\n    types: [types.running, types.cycling, types.downhill, types.climbing],\r\n  },\r\n  bekk: {\r\n    id: 8433,\r\n    name: \"Bekk\",\r\n    types: [types.running, types.cycling, types.downhill, types.climbing],\r\n  },\r\n  bml: {\r\n    id: 551609,\r\n    name: \"Breaking Marathon Limits\",\r\n    types: [types.running, types.downhill],\r\n  },\r\n  // bliss: {\r\n  //   id: 597247,\r\n  //   name: \"Bliss\",\r\n  //   types: [types.running, types.downhill, types.bliss],\r\n  // },\r\n};\r\n","import React from \"react\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport styles from \"./mystyle.module.css\";\r\nimport { clubs } from \"./data/clubs\";\r\nimport { writeStorage } from \"@rehooks/local-storage\";\r\nimport * as GA from \"./googleAnalytics\"\r\n\r\nconst ClubDropdown = props => {\r\n  const items = Object.values(clubs).map(club => (\r\n    <Dropdown.Item\r\n      key={club.id}\r\n      className={styles.dropdown_item}\r\n      onClick={() => {\r\n        GA.changeClub(club)\r\n        writeStorage(\"club\", club);\r\n        //temporary hack to avoid react \"looping\"\r\n        //and also clear results so that there is only result from current club\r\n        window.location.reload(true);\r\n      }}\r\n    >\r\n      {club.name}\r\n    </Dropdown.Item>\r\n  ));\r\n\r\n  const clubName = (props.club && props.club.name) || props.club;\r\n\r\n  return (\r\n    <div className={styles.button_row}>\r\n      <DropdownButton className={styles.button} title={\"Klubb : \" + clubName}>\r\n        {items}\r\n      </DropdownButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClubDropdown;\r\n","import React from \"react\";\r\nimport SegmentBoard from \"./segmentboard\";\r\nimport Scoreboard from \"./Scoreboard\";\r\nimport { allGroups } from \"./data/segments\";\r\nimport { allSegments } from \"./data/segments\";\r\nimport * as qs from \"query-string\";\r\nimport { useAccesToken } from \"./calculation/api\";\r\nimport Dropdowns from \"./Dropdowns\";\r\nimport ClubDropdown from \"./ClubDropdown\";\r\nimport { writeStorage } from \"@rehooks/local-storage\";\r\nimport { useEffect } from \"react\";\r\nimport { getClub } from \"./data/clubs\";\r\nimport styles from \"./mystyle.module.css\";\r\n\r\nconst Page = props => {\r\n  const lsSegmentGroup = props.segmentGroup;\r\n\r\n  const defaultSegmentGroup = \"bml\";\r\n  const startSegmentGroup = allGroups[lsSegmentGroup]\r\n    ? lsSegmentGroup\r\n    : defaultSegmentGroup;\r\n\r\n  const [dateRange, setDateRange] = React.useState(props.period || \"year\");\r\n  const [segmentGroup, setSegmentGroup] = React.useState(startSegmentGroup);\r\n\r\n  useEffect(() => writeStorage(\"segmentGroup\", segmentGroup), [segmentGroup]);\r\n\r\n  const [sortMode, setSortMode] = React.useState({ score: true });\r\n  const [clicked, setClicked] = React.useState(false);\r\n\r\n  const queryParams = qs.parse(props.location.search);\r\n\r\n  useAccesToken();\r\n\r\n  let urlSegments = [];\r\n  try {\r\n    const res = JSON.parse(queryParams.segments);\r\n    urlSegments = !res.some(isNaN) ? res : [];\r\n  } catch (error) {\r\n    // console.log(error);\r\n  }\r\n\r\n  const segmentsFromGroup = Object.values(allSegments)\r\n    .filter(seg => seg.groups[segmentGroup])\r\n    .map(x => x.id);\r\n\r\n  const currentSegments =\r\n    urlSegments.length > 0 ? urlSegments : segmentsFromGroup;\r\n\r\n  const club = getClub(queryParams.club, props.lsClub);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className={styles.headerHeadline}>STRAVAKONGEN</h1>\r\n      <ClubDropdown club={club} />\r\n      <Dropdowns\r\n        props={{\r\n          currentSegments,\r\n          sortMode,\r\n          segmentGroup,\r\n          dateRange,\r\n          setDateRange,\r\n          setSortMode,\r\n          setSegmentGroup,\r\n          clicked,\r\n          club\r\n        }}\r\n      />\r\n      <Scoreboard\r\n        sortingMode={sortMode}\r\n        segments={currentSegments}\r\n        dateRange={dateRange}\r\n        clicked={clicked}\r\n        setClicked={setClicked}\r\n      />\r\n      {currentSegments.map((segId, ind) => (\r\n        <SegmentBoard\r\n          key={ind}\r\n          club={club}\r\n          dateRange={dateRange}\r\n          segmentId={segId}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import { createStore, action } from \"easy-peasy\";\r\n\r\nexport const store = createStore({\r\n  accessToken: null,\r\n  athleteEfforts: {\r\n    all: {},\r\n    year: {},\r\n    month: {}\r\n  },\r\n  segmentLeaderboards: {\r\n    all: {},\r\n    year: {},\r\n    month: {}\r\n  },\r\n  segments: {},\r\n  segmentRowClicked: false,\r\n  leaderboardClicked: false,\r\n\r\n  setSegmentRowClicked: action((state, clicked) => {\r\n    state.segmentRowClicked = clicked;\r\n  }),\r\n  setLeaderboardClicked: action((state, clicked) => {\r\n    state.leaderboardClicked = clicked;\r\n  }),\r\n  addAccessToken: action((state, acces_token) => {\r\n    if (acces_token) state.accessToken = acces_token;\r\n  }),\r\n  addSegment: action((state, segment) => {\r\n    if (!segment) return;\r\n    const { name, distance, average_grade, activity_type } = segment;\r\n    state.segments[segment.id] = {\r\n      name,\r\n      distance,\r\n      average_grade,\r\n      activity_type\r\n    };\r\n  }),\r\n  addLeaderboard: action((state, payload) => {\r\n    if (!payload) return;\r\n\r\n    const filteredLeaderboard = payload.leaderboard.filter(\r\n      effort => effort.rank <= 50\r\n    );\r\n\r\n    const segmentId = payload.id;\r\n    state.segmentLeaderboards[payload.dateRange][\r\n      segmentId\r\n    ] = filteredLeaderboard;\r\n\r\n    const addEntry = entry => {\r\n      entry.segment = segmentId;\r\n\r\n      const curEntries =\r\n        state.athleteEfforts[payload.dateRange][entry.athlete_name] || {};\r\n      curEntries[entry.segment] = entry;\r\n      state.athleteEfforts[payload.dateRange][entry.athlete_name] = curEntries;\r\n    };\r\n    filteredLeaderboard.forEach(addEntry);\r\n  })\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport Page from \"./Page\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport { StoreProvider } from \"easy-peasy\";\nimport useLocalStorage from \"@rehooks/local-storage\";\nimport store from \"./Store\";\n\nimport ReactGA from 'react-ga';\n\nconst isDevelopment = process.env.NODE_ENV === \"development\"\n\nif (!isDevelopment) {\n  ReactGA.initialize('UA-163677104-1', {\n    debug: false,\n    titleCase: false,\n    gaOptions: {\n      siteSpeedSampleRate: 100\n    }\n  });\n  ReactGA.pageview(window.location.pathname + window.location.search);\n}\n\nconst zoomOutMobile = () => {\n  const viewport = document.querySelector('meta[name=\"viewport\"]');\n  if (viewport) {\n    viewport.content = \"initial-scale=1\";\n    viewport.content = \"width=device-width\";\n  }\n};\n\nconst App = () => {\n  const [segmentGroup] = useLocalStorage(\"segmentGroup\");\n  const [lsClub] = useLocalStorage(\"club\");\n  const [period] = useLocalStorage(\"period\");\n\n  zoomOutMobile();\n  return (\n    <StoreProvider store={store}>\n      <Router>\n        <Route\n          path={\"/\"}\n          component={props => (\n            <Page {...props} segmentGroup={segmentGroup} lsClub={lsClub} period={period} />\n          )}\n        />\n      </Router>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport './fonts/Elianto-Regular.ttf'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entry_first\":\"mystyle_entry_first__GZGLw\",\"entry_second\":\"mystyle_entry_second__13TpZ\",\"entry_third\":\"mystyle_entry_third__3fLIV\",\"entry_normal\":\"mystyle_entry_normal__34dj6\",\"button_row\":\"mystyle_button_row__17d_B\",\"button\":\"mystyle_button__1ALQQ\",\"ranktext_td\":\"mystyle_ranktext_td__1tHWr\",\"ranktext_rank\":\"mystyle_ranktext_rank__2OPnq\",\"ranktext_score\":\"mystyle_ranktext_score__1CaNx\",\"header\":\"mystyle_header__1abc1\",\"th\":\"mystyle_th__1KFdi\",\"score\":\"mystyle_score__3Csax\",\"divider\":\"mystyle_divider__1Tx-L\",\"entry_border\":\"mystyle_entry_border__1ohS_\",\"headerHeadline\":\"mystyle_headerHeadline__150AA\"};"],"sourceRoot":""}